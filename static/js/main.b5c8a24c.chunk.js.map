{"version":3,"sources":["reducers/authSlice.tsx","services/postServices.js","reducers/feedSlice.tsx","reducers/apiSlice.tsx","app/store.ts","app/hooks.ts","services/accountServices.js","components/Sidebar/Sidebar.tsx","components/Feed/PostForm.tsx","components/Feed/PostComments.tsx","components/Feed/Post.tsx","components/Feed/Feed.tsx","components/AuthRoute/AuthRoute.tsx","components/LoginPage/LoginPage.tsx","services/userServices.js","components/SidebarWidgets/SuggestedUser.tsx","components/SidebarWidgets/Suggested.tsx","components/SidebarRight/SidebarRight.tsx","components/Feed/SubFeed.tsx","components/Profile/Profile.tsx","components/Register/Register.tsx","app.tsx","index.tsx","components/Feed/Post.module.css","components/LoginPage/LoginPage.module.css","components/Sidebar/Sidebar.module.css","components/Feed/PostForm.module.css","components/Profile/Profile.module.css","components/Feed/Feed.module.css","components/Feed/PostComments.module.css","components/SidebarWidgets/Suggested.module.css","app.module.css","components/SidebarRight/SidebarRight.module.css"],"names":["authSlice","createSlice","name","initialState","isLoggedIn","user","reducers","login","state","action","payload","logout","actions","baseURL","headersList","createComment","post_id","content","a","body","fetch","method","headers","credentials","JSON","stringify","res","getComments","url","json","feedSlice","addPostToTop","setPosts","posts","clearFeed","feedLikePost","map","post","liked","like_count","feedUnlikePost","apiSlice","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","getUser","query","username","getUserPosts","getAllPosts","providesTags","getSubPosts","createPost","mutation","postContent","invalidatesTags","likePost","onQueryStarted","dispatch","queryFulfilled","util","updateQueryData","undefined","console","log","forEach","e","unlikePost","useGetAllPostsQuery","useGetSubPostsQuery","useCreatePostMutation","useLikePostMutation","useUnlikePostMutation","useGetUserQuery","useGetUserPostsQuery","persistConfig","key","storage","whitelist","combineReducers","auth","feed","reducer","persistedReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","concat","useAppDispatch","useDispatch","useAppSelector","useSelector","userLogin","pass","result","userRegister","screen_name","userLogout","Sidebar","history","useHistory","handleNavClick","option","target","id","push","handleLogout","className","Styles","style","fontSize","onClick","stringToColor","string","i","hash","length","charCodeAt","color","toString","substr","stringAvatar","sx","bgcolor","children","toUpperCase","PostForm","useState","setPost","image","setImage","handleNewPost","isLoading","unwrap","Avatar","placeholder","onChange","value","type","Button","variant","PostComments","comments","refreshCom","setPostContent","handleNewComment","handleKeyPress","which","preventDefault","onKeyPress","comment","months","Post","open","setOpen","setComments","comVis","setComVis","createdDate","Date","created_at","currentDate","timeDiff","Math","round","abs","getTime","refreshComments","coms","toggleComments","handleRedirectProfile","screenname","getMonth","getDay","image_url","src","alt","comment_count","stopPropagation","Modal","onClose","Feed","data","isSuccess","isError","error","CircularProgress","index","AuthRoute","rest","loggedIn","render","location","to","pathname","from","LoginPage","setUsername","password","setPassword","handleLogin","status","handleRegister","getSuggestedUsers","jsonRes","followUser","SuggestedUser","Suggested","users","setUsers","useEffect","popUsers","userList","SidebarRight","SubFeed","Profile","useParams","isSucc2","goBack","Register","setScreenname","App","path","persistor","persistStore","ReactDOM","StrictMode","loading","basename","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.b5c8a24c.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nexport const authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    isLoggedIn: false,\r\n    user: \"\",\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.isLoggedIn = true;\r\n      state.user = action.payload.user;\r\n    },\r\n    logout: (state) => {\r\n      state.isLoggedIn = false;\r\n      state.user = \"\";\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n","export const baseURL = \"https://safe-wave-92099.herokuapp.com\";\r\nexport let headersList = {\r\n  \"Content-Type\": \"application/json\",\r\n};\r\n\r\nconst getAllUserPosts = async () => {\r\n  const url = baseURL + \"/posts/getUserPosts\";\r\n  let res = await fetch(url, {\r\n    method: \"GET\",\r\n    headers: headersList,\r\n    credentials: \"include\",\r\n  });\r\n  let jsonRes = await res.json();\r\n  // console.log(jsonRes);\r\n  return jsonRes;\r\n};\r\n\r\nconst getAllSubscribedPosts = async () => {\r\n  const url = baseURL + \"/posts/getSubscribedPosts\";\r\n  let res = await fetch(url, {\r\n    method: \"GET\",\r\n    headers: headersList,\r\n    credentials: \"include\",\r\n  });\r\n  let jsonRes = await res.json();\r\n  return jsonRes;\r\n};\r\n\r\nconst getAllPosts = async () => {\r\n  const url = baseURL + \"/posts/getAllPosts\";\r\n  let res = await fetch(url, {\r\n    mode: \"cors\",\r\n    method: \"GET\",\r\n    headers: headersList,\r\n    credentials: \"include\",\r\n  });\r\n  let jsonRes = await res.json();\r\n  // console.log(jsonRes);\r\n  return jsonRes;\r\n};\r\nconst makeNewPost = async (content, image) => {\r\n  const url = baseURL + \"/posts/new\";\r\n  let body = {\r\n    content,\r\n    image,\r\n  };\r\n  let res = await fetch(url, {\r\n    method: \"POST\",\r\n    headers: headersList,\r\n    credentials: \"include\",\r\n    body: JSON.stringify(body),\r\n  });\r\n  return res;\r\n};\r\n\r\nconst likePost = async (post_id) => {\r\n  const url = baseURL + \"/posts/likePost\";\r\n  let body = {\r\n    post_id,\r\n  };\r\n  let res = await fetch(url, {\r\n    method: \"POST\",\r\n    headers: headersList,\r\n    credentials: \"include\",\r\n    body: JSON.stringify(body),\r\n  });\r\n  return res;\r\n};\r\n\r\nconst unlikePost = async (post_id) => {\r\n  const url = baseURL + \"/posts/unlikePost\";\r\n  let body = {\r\n    post_id,\r\n  };\r\n  let res = await fetch(url, {\r\n    method: \"POST\",\r\n    headers: headersList,\r\n    credentials: \"include\",\r\n    body: JSON.stringify(body),\r\n  });\r\n  return res;\r\n};\r\n\r\nconst createComment = async (post_id, content) => {\r\n  const url = baseURL + \"/posts/createComment\";\r\n  let body = {\r\n    post_id,\r\n    content,\r\n  };\r\n  let res = await fetch(url, {\r\n    method: \"POST\",\r\n    headers: headersList,\r\n    credentials: \"include\",\r\n    body: JSON.stringify(body),\r\n  });\r\n  return res;\r\n};\r\n\r\nconst getComments = async (post_id) => {\r\n  const url = baseURL + `/posts/${post_id}/comments`;\r\n  let res = await fetch(url, {\r\n    method: \"GET\",\r\n    headers: headersList,\r\n    credentials: \"include\",\r\n  });\r\n  return await res.json();\r\n};\r\nexport {\r\n  getAllUserPosts,\r\n  makeNewPost,\r\n  getAllSubscribedPosts,\r\n  getAllPosts,\r\n  likePost,\r\n  getComments,\r\n  createComment,\r\n  unlikePost,\r\n};\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport {\r\n  getAllPosts,\r\n  getAllSubscribedPosts,\r\n  likePost,\r\n  unlikePost,\r\n} from \"../services/postServices\";\r\n\r\ntype feedSliceState = {\r\n  content: string;\r\n  username: string;\r\n  created_at: string;\r\n  liked: boolean;\r\n  post_id: number;\r\n  image_url: string;\r\n  like_count: number;\r\n  comment_count: number;\r\n}[];\r\nconst initialState: feedSliceState = [];\r\n\r\nlet feedSlice = createSlice({\r\n  name: \"feed\",\r\n  initialState,\r\n  reducers: {\r\n    addPostToTop: (state, action) => {\r\n      return [action.payload, ...state];\r\n    },\r\n    setPosts: (state, action) => {\r\n      return action.payload.posts;\r\n    },\r\n    clearFeed: (state) => {\r\n      return [];\r\n    },\r\n    feedLikePost: (state, action) => {\r\n      return state.map((post) =>\r\n        post.post_id === action.payload.post_id\r\n          ? { ...post, liked: true, like_count: post.like_count + 1 }\r\n          : post\r\n      );\r\n    },\r\n    feedUnlikePost: (state, action) => {\r\n      return state.map((post) =>\r\n        post.post_id === action.payload.post_id\r\n          ? { ...post, liked: false, like_count: post.like_count - 1 }\r\n          : post\r\n      );\r\n    },\r\n  },\r\n});\r\n\r\nexport const updateAllPosts = () => {\r\n  return (dispatch: any, getState: any) => {\r\n    getAllPosts().then((posts) => {\r\n      dispatch(setPosts({ posts }));\r\n      // console.log(posts);\r\n    });\r\n  };\r\n};\r\n\r\nexport const updateSubscribedPosts = () => {\r\n  return (dispatch: any, getState: any) => {\r\n    getAllSubscribedPosts().then((posts) => {\r\n      dispatch(setPosts({ posts }));\r\n      // console.log(posts);\r\n    });\r\n  };\r\n};\r\n\r\nexport const updateLikePost = (post_id: number) => {\r\n  return (dispatch: any, getState: any) => {\r\n    likePost(post_id);\r\n    dispatch(feedLikePost({ post_id }));\r\n  };\r\n};\r\n\r\nexport const updateUnlikePost = (post_id: number) => {\r\n  return (dispatch: any, getState: any) => {\r\n    unlikePost(post_id);\r\n    dispatch(feedUnlikePost({ post_id }));\r\n  };\r\n};\r\nexport const {\r\n  addPostToTop,\r\n  setPosts,\r\n  clearFeed,\r\n  feedLikePost,\r\n  feedUnlikePost,\r\n} = feedSlice.actions;\r\nexport default feedSlice.reducer;\r\n","import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n\r\nexport type PostRType = PostType[];\r\n\r\nexport type PostType = {\r\n  content: string;\r\n  username: string;\r\n  created_at: string;\r\n  liked: boolean;\r\n  post_id: number;\r\n  image_url: string;\r\n  like_count: number;\r\n  comment_count: number;\r\n  screen_name: string;\r\n};\r\n\r\nexport type User = {\r\n  username: string;\r\n  screen_name: string;\r\n  bio: string;\r\n};\r\n\r\nexport const apiSlice = createApi({\r\n  reducerPath: \"api\",\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: \"https://safe-wave-92099.herokuapp.com/\",\r\n    credentials: \"include\",\r\n  }),\r\n  tagTypes: [\"Post\"],\r\n  endpoints: (builder) => ({\r\n    getUser: builder.query<User, string>({\r\n      query: (username) => `user/${username}`,\r\n    }),\r\n    getUserPosts: builder.query<PostRType, string>({\r\n      query: (username) => `user/${username}/posts`,\r\n    }),\r\n    getAllPosts: builder.query<PostRType, void>({\r\n      query: () => \"posts/getAllPosts\",\r\n      providesTags: [\"Post\"],\r\n    }),\r\n    getSubPosts: builder.query<PostRType, void>({\r\n      query: () => \"posts/getSubscribedPosts\",\r\n      providesTags: [\"Post\"],\r\n    }),\r\n    createPost: builder.mutation({\r\n      query: (postContent) => ({\r\n        url: \"posts/new\",\r\n        method: \"POST\",\r\n        body: postContent,\r\n      }),\r\n      invalidatesTags: [\"Post\"],\r\n    }),\r\n    likePost: builder.mutation<void, number>({\r\n      query: (post_id) => ({\r\n        url: \"posts/likePost\",\r\n        method: \"POST\",\r\n        body: { post_id },\r\n      }),\r\n      async onQueryStarted(post_id, { dispatch, queryFulfilled }) {\r\n        try {\r\n          //await queryFulfilled;\r\n          dispatch(\r\n            apiSlice.util.updateQueryData(\"getAllPosts\", undefined, (posts) => {\r\n              console.log(\"patching\");\r\n              posts.forEach((post) => {\r\n                if (post.post_id === post_id) {\r\n                  post.like_count++;\r\n                  post.liked = true;\r\n                }\r\n              });\r\n            })\r\n          );\r\n          dispatch(\r\n            apiSlice.util.updateQueryData(\"getSubPosts\", undefined, (posts) => {\r\n              console.log(\"patching\");\r\n              posts.forEach((post) => {\r\n                if (post.post_id === post_id) {\r\n                  post.like_count++;\r\n                  post.liked = true;\r\n                }\r\n              });\r\n            })\r\n          );\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      },\r\n    }),\r\n    unlikePost: builder.mutation<void, number>({\r\n      query: (post_id) => ({\r\n        url: \"posts/unlikePost\",\r\n        method: \"POST\",\r\n        body: { post_id },\r\n      }),\r\n      async onQueryStarted(post_id, { dispatch, queryFulfilled }) {\r\n        try {\r\n          //await queryFulfilled;\r\n          dispatch(\r\n            apiSlice.util.updateQueryData(\"getAllPosts\", undefined, (posts) => {\r\n              console.log(\"patching\");\r\n              posts.forEach((post) => {\r\n                if (post.post_id === post_id) {\r\n                  post.like_count--;\r\n                  post.liked = false;\r\n                }\r\n              });\r\n            })\r\n          );\r\n          dispatch(\r\n            apiSlice.util.updateQueryData(\"getSubPosts\", undefined, (posts) => {\r\n              console.log(\"patching\");\r\n              posts.forEach((post) => {\r\n                if (post.post_id === post_id) {\r\n                  post.like_count--;\r\n                  post.liked = false;\r\n                }\r\n              });\r\n            })\r\n          );\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useGetAllPostsQuery,\r\n  useGetSubPostsQuery,\r\n  useCreatePostMutation,\r\n  useLikePostMutation,\r\n  useUnlikePostMutation,\r\n  useGetUserQuery,\r\n  useGetUserPostsQuery,\r\n} = apiSlice;\r\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport authSlice from \"../reducers/authSlice\";\nimport feedSlice from \"../reducers/feedSlice\";\nimport { persistReducer } from \"redux-persist\";\nimport { apiSlice } from \"../reducers/apiSlice\";\nimport storage from \"redux-persist/lib/storage\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  whitelist: [\"auth\"],\n};\n\nconst reducers = combineReducers({\n  auth: authSlice,\n  feed: feedSlice,\n  [apiSlice.reducerPath]: apiSlice.reducer,\n});\nconst persistedReducer = persistReducer(persistConfig, reducers);\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(apiSlice.middleware),\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"./store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { baseURL, headersList } from \"./postServices\";\r\n\r\nlet userLogin = async (user, pass) => {\r\n  let url = baseURL + \"/account/login\";\r\n  let body = {\r\n    user,\r\n    pass,\r\n  };\r\n  const result = await fetch(url, {\r\n    credentials: \"include\",\r\n    method: \"POST\",\r\n    headers: headersList,\r\n    body: JSON.stringify(body),\r\n  });\r\n  // console.log(result);\r\n  return result;\r\n};\r\n\r\nlet userRegister = async (user, pass, screen_name) => {\r\n  let url = baseURL + \"/account/register\";\r\n  let body = {\r\n    user,\r\n    pass,\r\n    screen_name,\r\n  };\r\n  const result = await fetch(url, {\r\n    method: \"POST\",\r\n    headers: headersList,\r\n    body: JSON.stringify(body),\r\n  });\r\n  return result;\r\n};\r\n\r\nlet userLogout = async () => {\r\n  let url = baseURL + \"/account/logout\";\r\n  const result = await fetch(url, {\r\n    method: \"POST\",\r\n    headers: headersList,\r\n    credentials: \"include\",\r\n  });\r\n  return result;\r\n};\r\nexport { userRegister, userLogin, userLogout };\r\n","import React from \"react\";\r\nimport Styles from \"./Sidebar.module.css\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { userLogout } from \"../../services/accountServices\";\r\nimport { logout } from \"../../reducers/authSlice\";\r\nimport TextSnippetIcon from \"@mui/icons-material/TextSnippet\";\r\n\r\nconst Sidebar = (): JSX.Element => {\r\n  const history = useHistory();\r\n  const dispatch = useAppDispatch();\r\n  const user = useAppSelector((state) => state.auth.user);\r\n  const handleNavClick = async (e: any) => {\r\n    let option = e.target.id;\r\n    // if (option === \"/all\") {\r\n    //   dispatch(updateAllPosts());\r\n    // } else if (option === \"/subscribed\") {\r\n    //   dispatch(updateSubscribedPosts());\r\n    // }\r\n    history.push(option);\r\n  };\r\n\r\n  const handleLogout = async (e: any) => {\r\n    await userLogout();\r\n    dispatch(logout());\r\n  };\r\n\r\n  return (\r\n    <div className={Styles[\"sidebar-container\"]}>\r\n      <div className={Styles[\"sidebar-logo\"]}>\r\n        <TextSnippetIcon style={{ fontSize: \"40px\" }} />\r\n      </div>\r\n\r\n      <div\r\n        onClick={handleNavClick}\r\n        id={`/profile/${user}`}\r\n        className={Styles[\"sidebar-item\"]}\r\n      >\r\n        Profile\r\n      </div>\r\n      <div\r\n        onClick={handleNavClick}\r\n        id=\"/all\"\r\n        className={Styles[\"sidebar-item\"]}\r\n      >\r\n        All Posts\r\n      </div>\r\n      <div\r\n        onClick={handleNavClick}\r\n        id=\"/subscribed\"\r\n        className={Styles[\"sidebar-item\"]}\r\n      >\r\n        Subscribed Posts\r\n      </div>\r\n      <div\r\n        onClick={handleLogout}\r\n        className={`${Styles[\"sidebar-item\"]} ${Styles[\"sidebar-logout\"]}`}\r\n      >\r\n        Logout\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import { useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport Styles from \"./PostForm.module.css\";\r\nimport { Button } from \"@mui/material\";\r\nimport { useCreatePostMutation } from \"../../reducers/apiSlice\";\r\nimport { Avatar } from \"@mui/material\";\r\n\r\nfunction stringToColor(string: string) {\r\n  let hash = 0;\r\n  let i;\r\n\r\n  /* eslint-disable no-bitwise */\r\n  for (i = 0; i < string.length; i += 1) {\r\n    hash = string.charCodeAt(i) + ((hash << 5) - hash);\r\n  }\r\n\r\n  let color = \"#\";\r\n\r\n  for (i = 0; i < 3; i += 1) {\r\n    const value = (hash >> (i * 8)) & 0xff;\r\n    color += `00${value.toString(16)}`.substr(-2);\r\n  }\r\n  /* eslint-enable no-bitwise */\r\n\r\n  return color;\r\n}\r\n\r\nexport function stringAvatar(name: string) {\r\n  return {\r\n    sx: {\r\n      bgcolor: stringToColor(name),\r\n    },\r\n    children: name[0].toUpperCase() + name[1],\r\n  };\r\n}\r\n\r\nconst PostForm = (): JSX.Element => {\r\n  const [post, setPost] = useState(\"\");\r\n  let username = useAppSelector((state) => state.auth.user);\r\n  const [image, setImage] = useState(\"\");\r\n  const [createPost, { isLoading }] = useCreatePostMutation();\r\n  const dispatch = useAppDispatch();\r\n  const handleNewPost = async () => {\r\n    await createPost({ content: post, image }).unwrap();\r\n    //await makeNewPost(post, image);\r\n    // if (type === \"all\") dispatch(updateAllPosts());\r\n    // else if (type === \"subscribed\") dispatch(updateSubscribedPosts());\r\n  };\r\n  return (\r\n    <div className={Styles[\"post-form-outer-container\"]}>\r\n      <Avatar\r\n        className={Styles[\"post-form-avatar\"]}\r\n        {...stringAvatar(username)}\r\n      ></Avatar>\r\n      <div className={Styles[\"post-form-container\"]}>\r\n        <textarea\r\n          placeholder=\"Whats Happening?\"\r\n          className={Styles[\"post-text-area\"]}\r\n          onChange={(e) => setPost(e.target.value)}\r\n        ></textarea>\r\n        <div className={Styles[\"post-submit-container\"]}>\r\n          <input\r\n            onChange={(e) => setImage(e.target.value)}\r\n            className={Styles[\"post-image-input\"]}\r\n            type=\"text\"\r\n            placeholder=\"Image URL(optional)\"\r\n          ></input>\r\n          <Button\r\n            className={Styles[\"post-form-button\"]}\r\n            onClick={handleNewPost}\r\n            variant=\"contained\"\r\n          >\r\n            Post\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n","import { useState } from \"react\";\r\nimport { createComment } from \"../../services/postServices\";\r\nimport Styles from \"./PostComments.module.css\";\r\n\r\nconst PostComments = ({\r\n  comments,\r\n  post_id,\r\n  refreshCom,\r\n}: {\r\n  refreshCom: () => Promise<void>;\r\n  post_id: number;\r\n  comments: { username: string; content: string }[];\r\n}): JSX.Element => {\r\n  const [postContent, setPostContent] = useState(\"\");\r\n  const handleNewComment = async () => {\r\n    createComment(post_id, postContent);\r\n  };\r\n\r\n  const handleKeyPress = async (e: any) => {\r\n    if (e.which === 13) {\r\n      e.preventDefault();\r\n      await handleNewComment();\r\n      refreshCom();\r\n    }\r\n  };\r\n  return (\r\n    <div className={Styles[\"comments-container\"]}>\r\n      <div className={Styles[\"comments-input-container\"]}>\r\n        <textarea\r\n          onKeyPress={handleKeyPress}\r\n          onChange={(e) => setPostContent(e.target.value)}\r\n          className={Styles[\"comments-input\"]}\r\n        ></textarea>\r\n      </div>\r\n\r\n      {comments.map((comment) => (\r\n        <div className={Styles[\"comments-comment\"]}>\r\n          {comment.username}\r\n          <p>{comment.content}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostComments;\r\n","import { useState } from \"react\";\r\nimport { getComments } from \"../../services/postServices\";\r\nimport { useAppDispatch } from \"../../app/hooks\";\r\nimport Styles from \"./Post.module.css\";\r\nimport PostComments from \"./PostComments\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\nimport CommentIcon from \"@mui/icons-material/Comment\";\r\nimport FavoriteBorderIcon from \"@mui/icons-material/FavoriteBorder\";\r\nimport { Modal } from \"@mui/material\";\r\nimport { Avatar } from \"@mui/material\";\r\nimport { stringAvatar } from \"./PostForm\";\r\nimport {\r\n  PostType,\r\n  useLikePostMutation,\r\n  useUnlikePostMutation,\r\n} from \"../../reducers/apiSlice\";\r\nimport { useHistory } from \"react-router\";\r\nconst months = [\r\n  \"Jan\",\r\n  \"Feb\",\r\n  \"Mar\",\r\n  \"Apr\",\r\n  \"May\",\r\n  \"Jun\",\r\n  \"Jul\",\r\n  \"Aug\",\r\n  \"Sep\",\r\n  \"Oct\",\r\n  \"Nov\",\r\n  \"Dec\",\r\n];\r\n\r\nconst Post = ({ post }: { post: PostType }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [comments, setComments] = useState<\r\n    { username: string; content: string }[]\r\n  >([]);\r\n  const history = useHistory();\r\n  const [likePost] = useLikePostMutation();\r\n  const [unlikePost] = useUnlikePostMutation();\r\n  const [comVis, setComVis] = useState(false);\r\n  const dispatch = useAppDispatch();\r\n  const createdDate = new Date(post.created_at);\r\n  const currentDate = new Date();\r\n  const timeDiff =\r\n    Math.round(Math.abs(createdDate.getTime() - currentDate.getTime()) / 36e5) -\r\n    8;\r\n  //console.log(createdDate, currentDate, timeDiff);\r\n  const handleLike = (e: any) => {\r\n    e.stopPropagation();\r\n    likePost(post.post_id);\r\n\r\n    //dispatch(updateLikePost(post_id));\r\n  };\r\n\r\n  const handleDislike = (e: any) => {\r\n    e.stopPropagation();\r\n    unlikePost(post.post_id);\r\n  };\r\n\r\n  const refreshComments = async () => {\r\n    let coms = await getComments(post.post_id);\r\n    console.log(coms);\r\n    setComments(coms);\r\n  };\r\n  const toggleComments = async () => {\r\n    if (!comVis) refreshComments();\r\n    setComVis(!comVis);\r\n  };\r\n\r\n  const handleRedirectProfile = async () => {\r\n    history.push(`/profile/${post.username}`);\r\n  };\r\n  return (\r\n    <div className={Styles[\"post-outer-container\"]}>\r\n      <Avatar\r\n        className={Styles[\"post-avatar\"]}\r\n        {...stringAvatar(post.username)}\r\n      />\r\n      <div className={Styles[\"post-container\"]}>\r\n        <div onClick={toggleComments}>\r\n          <div className={Styles[\"post-header\"]}>\r\n            <div\r\n              onClick={handleRedirectProfile}\r\n              className={Styles[\"user-name-container\"]}\r\n            >\r\n              <div className={Styles[\"username\"]}>{post.screen_name}</div>\r\n              <div className={Styles.screenname}>@{post.username}</div>\r\n              <div className={Styles.screenname}>\r\n                {timeDiff > 24\r\n                  ? `${months[createdDate.getMonth()]} ${createdDate.getDay()}`\r\n                  : `${timeDiff}h`}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <p>{post.content}</p>\r\n          {post.image_url !== null && (\r\n            <img\r\n              onClick={() => setOpen(true)}\r\n              className={Styles[\"post-image\"]}\r\n              src={post.image_url}\r\n              alt={post.username}\r\n            ></img>\r\n          )}\r\n          <div className={Styles[\"post-footer\"]}>\r\n            <div className={Styles[\"comment-ind-container\"]}>\r\n              <CommentIcon></CommentIcon>\r\n              <span>{post.comment_count}</span>\r\n            </div>\r\n\r\n            <div\r\n              className={\r\n                post.liked\r\n                  ? Styles[\"material-icon-heart\"]\r\n                  : Styles[\"material-icon-border-heart\"]\r\n              }\r\n            >\r\n              {post.liked ? (\r\n                <FavoriteIcon onClick={handleDislike} />\r\n              ) : (\r\n                <FavoriteBorderIcon onClick={handleLike} />\r\n              )}\r\n              <span>{post.like_count}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {comVis && (\r\n          <PostComments\r\n            refreshCom={refreshComments}\r\n            post_id={post.post_id}\r\n            comments={comments}\r\n          ></PostComments>\r\n        )}\r\n        {post.image_url !== null && (\r\n          <Modal open={open} onClose={() => setOpen(false)}>\r\n            <img\r\n              className={Styles[\"modal-image\"]}\r\n              src={post.image_url}\r\n              alt={post.username}\r\n            ></img>\r\n          </Modal>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { PostType, useGetAllPostsQuery } from \"../../reducers/apiSlice\";\r\nimport Styles from \"./Feed.module.css\";\r\nimport PostForm from \"./PostForm\";\r\nimport Post from \"./Post\";\r\nimport { CircularProgress } from \"@mui/material\";\r\n\r\nconst Feed = (): JSX.Element => {\r\n  //const feed = useAppSelector((state) => state.feed);\r\n  const dispatch = useAppDispatch();\r\n  const user = useAppSelector((state) => state.auth.user);\r\n  const {\r\n    data: feed,\r\n    isLoading,\r\n    isSuccess,\r\n    isError,\r\n    error,\r\n  } = useGetAllPostsQuery();\r\n\r\n  let content;\r\n  // useEffect(() => {\r\n  //   if (user !== \"\") {\r\n  //     if (type === \"all\") {\r\n  //       dispatch(updateAllPosts());\r\n  //     } else if (type === \"subscribed\") {\r\n  //       dispatch(updateSubscribedPosts());\r\n  //     }\r\n  //   }\r\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  // }, [user, dispatch]);\r\n  if (isLoading) content = <CircularProgress></CircularProgress>;\r\n  else if (isSuccess)\r\n    content = feed!.map((post: PostType, index: any) => (\r\n      <Post post={post}></Post>\r\n    ));\r\n  console.log(feed);\r\n  return (\r\n    <div className={Styles[\"feed-container\"]}>\r\n      <h3 className={Styles[\"feed-header\"]}>Home</h3>\r\n      <PostForm></PostForm>\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Feed;\r\n","import { Route, Redirect } from \"react-router\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\n\r\nconst AuthRoute = ({ children, ...rest }: any) => {\r\n  const loggedIn = useAppSelector((state) => state.auth.isLoggedIn);\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={({ location }) =>\r\n        loggedIn ? (\r\n          children\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/login\",\r\n              state: { from: location },\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default AuthRoute;\r\n","import { login } from \"../../reducers/authSlice\";\r\nimport { useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { userLogin, userRegister } from \"../../services/accountServices\";\r\nimport { useHistory } from \"react-router\";\r\nimport { Redirect } from \"react-router\";\r\nimport Styles from \"./LoginPage.module.css\";\r\n\r\nconst LoginPage = (): JSX.Element => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  let loggedIn = useAppSelector((state) => state.auth.isLoggedIn);\r\n  let history = useHistory();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleLogin = async (e: any) => {\r\n    e.preventDefault();\r\n    const loginResult = await userLogin(username, password);\r\n    if (loginResult.status === 202) {\r\n      dispatch(login({ user: username }));\r\n      history.push(\"/feed\");\r\n    }\r\n  };\r\n\r\n  const handleRegister = async (e: any) => {\r\n    e.preventDefault();\r\n    history.push(\"/register\");\r\n  };\r\n\r\n  if (loggedIn) return <Redirect to=\"/all\"></Redirect>;\r\n\r\n  return (\r\n    <form className={Styles[\"login-form-container\"]}>\r\n      <label>\r\n        <b>Username</b>\r\n      </label>\r\n      <input\r\n        className={Styles[\"login-form-input\"]}\r\n        onChange={(e) => setUsername(e.target.value)}\r\n        placeholder=\"Username\"\r\n        type=\"text\"\r\n      ></input>\r\n      <label>\r\n        <b>Password</b>\r\n      </label>\r\n      <input\r\n        className={Styles[\"login-form-input\"]}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n        placeholder=\"Password\"\r\n        type=\"password\"\r\n      ></input>\r\n      <button\r\n        className={`${Styles[\"login-form-input\"]} ${Styles[\"login-form-button\"]}`}\r\n        onClick={handleLogin}\r\n      >\r\n        Submit\r\n      </button>\r\n      <button className={Styles[\"login-form-input\"]} onClick={handleRegister}>\r\n        Sign Up\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import { baseURL, headersList } from \"./postServices\";\r\n\r\nconst getSuggestedUsers = async () => {\r\n  const url = baseURL + \"/user/suggestedUsers\";\r\n  let res = await fetch(url, {\r\n    type: \"cors\",\r\n    method: \"GET\",\r\n    headers: headersList,\r\n    credentials: \"include\",\r\n  });\r\n  let jsonRes = await res.json();\r\n  return jsonRes;\r\n};\r\n\r\nconst followUser = async (target) => {\r\n  const url = baseURL + \"/user/followUser\";\r\n  const body = {\r\n    target: target,\r\n  };\r\n  let res = await fetch(url, {\r\n    method: \"POST\",\r\n    headers: headersList,\r\n    credentials: \"include\",\r\n    body: JSON.stringify(body),\r\n  });\r\n  let jsonRes = await res.json();\r\n  return jsonRes;\r\n};\r\n\r\nexport { getSuggestedUsers, followUser };\r\n","import { followUser } from \"../../services/userServices\";\r\nimport Styles from \"./Suggested.module.css\";\r\n\r\nconst SuggestedUser = ({ username }: { username: string }): JSX.Element => {\r\n  const handleFollow = () => {\r\n    followUser(username);\r\n  };\r\n  return (\r\n    <div className={Styles[\"suggested-entry\"]}>\r\n      {username}\r\n      <button onClick={handleFollow}>Follow</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SuggestedUser;\r\n","import Styles from \"./Suggested.module.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSuggestedUsers } from \"../../services/userServices\";\r\nimport SuggestedUser from \"./SuggestedUser\";\r\nconst Suggested = (): JSX.Element => {\r\n  const [users, setUsers] = useState<{ username: string }[]>([]);\r\n\r\n  useEffect(() => {\r\n    const popUsers = async () => {\r\n      let userList = await getSuggestedUsers();\r\n      // console.log(userList);\r\n      setUsers(userList);\r\n    };\r\n    popUsers();\r\n  }, []);\r\n  return (\r\n    <div className={Styles[\"widget-container\"]}>\r\n      <h5>Suggested Users</h5>\r\n      {users.map((user, index) => (\r\n        <SuggestedUser\r\n          key={user.username}\r\n          username={user.username}\r\n        ></SuggestedUser>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Suggested;\r\n","import Suggested from \"../SidebarWidgets/Suggested\";\r\nimport Styles from \"./SidebarRight.module.css\";\r\n\r\nconst SidebarRight = (): JSX.Element => {\r\n  return (\r\n    <div className={Styles[\"sidebar-container\"]}>\r\n      <Suggested />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SidebarRight;\r\n","import { PostType, useGetSubPostsQuery } from \"../../reducers/apiSlice\";\r\nimport Styles from \"./Feed.module.css\";\r\nimport PostForm from \"./PostForm\";\r\nimport Post from \"./Post\";\r\nimport { CircularProgress } from \"@mui/material\";\r\n\r\nconst SubFeed = (): JSX.Element => {\r\n  const { data: feed, isLoading, isSuccess } = useGetSubPostsQuery();\r\n\r\n  let content;\r\n\r\n  if (isLoading) content = <CircularProgress></CircularProgress>;\r\n  else if (isSuccess)\r\n    content = feed!.map((post: PostType, index: any) => (\r\n      <Post post={post}></Post>\r\n    ));\r\n  return (\r\n    <div className={Styles[\"feed-container\"]}>\r\n      <h3 className={Styles[\"feed-header\"]}>Home</h3>\r\n      <PostForm></PostForm>\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubFeed;\r\n","import Styles from \"./Profile.module.css\";\r\nimport { Avatar } from \"@mui/material\";\r\nimport {\r\n  PostType,\r\n  useGetUserPostsQuery,\r\n  useGetUserQuery,\r\n} from \"../../reducers/apiSlice\";\r\nimport Post from \"../Feed/Post\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport { useHistory } from \"react-router\";\r\nlet Profile = (): JSX.Element => {\r\n  let history = useHistory();\r\n  let { username } = useParams<{ username: string }>();\r\n  const {\r\n    data: user,\r\n    isLoading,\r\n    isSuccess,\r\n    isError,\r\n    error,\r\n  } = useGetUserQuery(username);\r\n\r\n  let content;\r\n  const {\r\n    data: posts,\r\n    isLoading: isLoading2,\r\n    isSuccess: isSucc2,\r\n    isError: isError2,\r\n    error: error2,\r\n  } = useGetUserPostsQuery(username);\r\n  console.log(user);\r\n  if (isSucc2)\r\n    content = posts!.map((post: PostType, index: any) => (\r\n      <Post post={post}></Post>\r\n    ));\r\n  return (\r\n    <div className={Styles[\"profile-container\"]}>\r\n      <div className={Styles[\"profile-header-container\"]}>\r\n        <ArrowBackIcon\r\n          onClick={() => history.goBack()}\r\n          className={Styles[\"back-arrow-icon\"]}\r\n        />\r\n      </div>\r\n      <div className={Styles[\"profile-image-container\"]}></div>\r\n      <div className={Styles[\"name-section\"]}>\r\n        <Avatar className={Styles[\"profile-avatar\"]} />\r\n        <h2>{user?.screen_name}</h2>\r\n        <div>@{user?.username}</div>\r\n      </div>\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import { login } from \"../../reducers/authSlice\";\r\nimport { useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { userLogin, userRegister } from \"../../services/accountServices\";\r\nimport { useHistory } from \"react-router\";\r\nimport { Redirect } from \"react-router\";\r\nimport Styles from \"../LoginPage/LoginPage.module.css\";\r\n\r\nconst Register = (): JSX.Element => {\r\n  const [screen_name, setScreenname] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  let loggedIn = useAppSelector((state) => state.auth.isLoggedIn);\r\n  let history = useHistory();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleRegister = async (e: any) => {\r\n    e.preventDefault();\r\n    const registerResult = await userRegister(username, password, screen_name);\r\n    if (registerResult.status === 202) {\r\n      const loginResult = await userLogin(username, password);\r\n      if (loginResult.status === 202) {\r\n        dispatch(login({ user: username }));\r\n        history.push(\"/all\");\r\n      }\r\n    }\r\n  };\r\n\r\n  if (loggedIn) return <Redirect to=\"/all\"></Redirect>;\r\n\r\n  return (\r\n    <form className={Styles[\"login-form-container\"]}>\r\n      <label>\r\n        <b>Screen Name</b>\r\n      </label>\r\n      <input\r\n        className={Styles[\"login-form-input\"]}\r\n        onChange={(e) => setScreenname(e.target.value)}\r\n        placeholder=\"Screen Name\"\r\n        type=\"text\"\r\n      ></input>\r\n      <label>\r\n        <b>Username</b>\r\n      </label>\r\n      <input\r\n        className={Styles[\"login-form-input\"]}\r\n        onChange={(e) => setUsername(e.target.value)}\r\n        placeholder=\"Username\"\r\n        type=\"text\"\r\n      ></input>\r\n      <label>\r\n        <b>Password</b>\r\n      </label>\r\n      <input\r\n        className={Styles[\"login-form-input\"]}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n        placeholder=\"Password\"\r\n        type=\"password\"\r\n      ></input>\r\n      <button className={Styles[\"login-form-input\"]} onClick={handleRegister}>\r\n        Sign Up\r\n      </button>\r\n      <button\r\n        className={Styles[\"login-form-input\"]}\r\n        onClick={() => history.push(\"/login\")}\r\n      >\r\n        Back to Login Page\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import Sidebar from \"./components/Sidebar/Sidebar\";\r\nimport Feed from \"./components/Feed/Feed\";\r\nimport { Redirect, Route, Switch } from \"react-router\";\r\nimport AuthRoute from \"./components/AuthRoute/AuthRoute\";\r\nimport LoginPage from \"./components/LoginPage/LoginPage\";\r\nimport Styles from \"./app.module.css\";\r\nimport SidebarRight from \"./components/SidebarRight/SidebarRight\";\r\nimport SubFeed from \"./components/Feed/SubFeed\";\r\nimport Profile from \"./components/Profile/Profile\";\r\nimport Register from \"./components/Register/Register\";\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <div className={Styles[\"app-container\"]}>\r\n      <Switch>\r\n        <Route path=\"/login\">\r\n          <LoginPage></LoginPage>\r\n        </Route>\r\n        <Route path=\"/register\">\r\n          <Register></Register>\r\n        </Route>\r\n        <AuthRoute path=\"/all\">\r\n          <Sidebar />\r\n          <Feed></Feed>\r\n          <SidebarRight />\r\n        </AuthRoute>\r\n        <AuthRoute path=\"/subscribed\">\r\n          <Sidebar />\r\n          <SubFeed></SubFeed>\r\n          <SidebarRight />\r\n        </AuthRoute>\r\n        <Route path=\"/profile/:username\">\r\n          <Sidebar />\r\n          <Profile />\r\n          <SidebarRight />\r\n        </Route>\r\n        <AuthRoute path=\"/\">\r\n          <Redirect to=\"/all\"></Redirect>\r\n        </AuthRoute>\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport App from \"./app\";\nimport { persistStore } from \"redux-persist\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nlet persistor = persistStore(store);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <HashRouter basename=\"/message-board\">\n          <App></App>\n        </HashRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post-container\":\"Post_post-container__1eauk\",\"post-image\":\"Post_post-image__1eJ1c\",\"post-header\":\"Post_post-header__1RNuL\",\"material-icon-heart\":\"Post_material-icon-heart__2TuZ3\",\"material-icon-border-heart\":\"Post_material-icon-border-heart__Gei2f\",\"post-footer\":\"Post_post-footer__THcfM\",\"comment-ind-container\":\"Post_comment-ind-container__DWjBB\",\"modal-image\":\"Post_modal-image__1AGpc\",\"user-name-container\":\"Post_user-name-container__3UKS6\",\"username\":\"Post_username__uDN1e\",\"screenname\":\"Post_screenname__fiKFS\",\"post-avatar\":\"Post_post-avatar__1h6T7\",\"post-outer-container\":\"Post_post-outer-container__nvX_u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login-form-container\":\"LoginPage_login-form-container__2uptE\",\"login-form-input\":\"LoginPage_login-form-input__10So9\",\"login-form-button\":\"LoginPage_login-form-button__3hphZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar-container\":\"Sidebar_sidebar-container__3ve-Y\",\"sidebar-logo\":\"Sidebar_sidebar-logo__2qQro\",\"sidebar-item\":\"Sidebar_sidebar-item__3tqF5\",\"sidebar-logout\":\"Sidebar_sidebar-logout__29fYi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post-text-area\":\"PostForm_post-text-area__2tqHQ\",\"post-form-container\":\"PostForm_post-form-container__2adad\",\"post-form-outer-container\":\"PostForm_post-form-outer-container__21ASL\",\"post-form-avatar\":\"PostForm_post-form-avatar__qfdX1\",\"post-submit-container\":\"PostForm_post-submit-container__2C7HZ\",\"post-image-input\":\"PostForm_post-image-input__3-g9l\",\"post-form-button\":\"PostForm_post-form-button__27-oG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile-container\":\"Profile_profile-container__25Udl\",\"profile-header-container\":\"Profile_profile-header-container__1RwmA\",\"profile-image-container\":\"Profile_profile-image-container__3f9_L\",\"profile-avatar\":\"Profile_profile-avatar__23Wgy\",\"back-arrow-icon\":\"Profile_back-arrow-icon__2zzmd\",\"name-section\":\"Profile_name-section__2ocHA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feed-container\":\"Feed_feed-container__24Wie\",\"feed-header\":\"Feed_feed-header__3uiu4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments-container\":\"PostComments_comments-container__3uFEf\",\"comments-input-container\":\"PostComments_comments-input-container__3dFH5\",\"comments-input\":\"PostComments_comments-input__ow6cX\",\"comments-comment\":\"PostComments_comments-comment__1wGZk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"widget-container\":\"Suggested_widget-container__3P3du\",\"suggested-entry\":\"Suggested_suggested-entry__1F6jb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app-container\":\"app_app-container__25y9D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar-container\":\"SidebarRight_sidebar-container__1zSIq\"};"],"sourceRoot":""}